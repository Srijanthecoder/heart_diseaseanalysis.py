# -*- coding: utf-8 -*-
"""heart_diseaseanalysis.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fLowdvBr30hibqXgF2Qm_wRlxqRpF_zb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import rcParams
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

from sklearn.neighbors import KNeighborsClassifier

df = pd.read_csv('/heart.csv')
print(df.head())

print(df.info())

print(df.describe())

import seaborn as sns
2
corrmat = df.corr()
3
top_corr_features = corrmat.index
4
plt.figure(figsize=(16,16))
5
#plot heat map
6
g=sns.heatmap(df[top_corr_features].corr(),annot=True,cmap="RdYlGn")
7
plt.show()

sns.set_style('whitegrid')
sns.countplot(x='target',data=df,palette='RdBu_r')
plt.show()

dataset = pd.get_dummies(df, columns = ['sex', 'cp',
                                        'fbs','restecg',
                                        'exang', 'slope',
                                        'ca', 'thal'])
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
standardScaler = StandardScaler()
columns_to_scale = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']
dataset[columns_to_scale] = standardScaler.fit_transform(dataset[columns_to_scale])
dataset.head()

y = dataset['target']
X = dataset.drop(['target'], axis = 1)

from sklearn.model_selection import cross_val_score
knn_scores = []
for k in range(1,21):
    knn_classifier = KNeighborsClassifier(n_neighbors = k)
    score=cross_val_score(knn_classifier,X,y,cv=10)
    knn_scores.append(score.mean())

plt.plot([k for k in range(1, 21)], knn_scores, color = 'red')
for i in range(1,21):
    plt.text(i, knn_scores[i-1], (i, knn_scores[i-1]))
plt.xticks([i for i in range(1, 21)])
plt.xlabel('Number of Neighbors (K)')
plt.ylabel('Scores')
plt.title('K Neighbors Classifier scores for different K values')
plt.show()

knn_classifier = KNeighborsClassifier(n_neighbors = 12)
score=cross_val_score(knn_classifier,X,y,cv=10)
score.mean()

from sklearn.ensemble import RandomForestClassifier
randomforest_classifier= RandomForestClassifier(n_estimators=10)
score=cross_val_score(randomforest_classifier,X,y,cv=10)
score.mean()

!pip install -q streamlit
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set up page title and description
st.title("Heart Disease Analysis Dashboard")
st.write("""
Welcome to the Heart Disease Analysis App! Here, you can explore and visualize heart disease data to understand key trends and patterns.
""")

# Load the heart disease dataset
file_path = "/heart.csv"
try:
    df = pd.read_csv(file_path)
except FileNotFoundError:
    st.error("Heart disease dataset not found. Please upload the correct file.")
else:
    st.subheader("Dataset Overview")
    st.write("Here’s a preview of the data:")
    st.write(df.head())

    # Show basic statistics of the dataset
    st.subheader("Basic Statistics")
    st.write(df.describe())

    # Display a correlation heatmap
    st.subheader("Correlation Matrix")
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(df.corr(), annot=True, cmap="coolwarm", ax=ax)
    st.pyplot(fig)

    # Display the distribution of ages in the dataset
    st.subheader("Age Distribution of Patients")
    fig, ax = plt.subplots()
    sns.histplot(df['age'], bins=20, kde=True, color="skyblue", ax=ax)
    plt.xlabel("Age")
    plt.ylabel("Frequency")
    st.pyplot(fig)

    # Check for columns like 'cholesterol' and 'target' for more visualizations
    if 'cholesterol' in df.columns and 'age' in df.columns:
        st.subheader("Cholesterol Levels by Age Group")
        fig, ax = plt.subplots()
        sns.scatterplot(data=df, x="age", y="cholesterol", hue="target", palette="cool", ax=ax)
        plt.xlabel("Age")
        plt.ylabel("Cholesterol Level")
        st.pyplot(fig)

# Sidebar options for more interactivity
st.sidebar.header("Analysis Options")
if st.sidebar.checkbox("Show Age and Cholesterol Distribution"):
    st.subheader("Age and Cholesterol Distribution")
    fig, ax = plt.subplots()
    sns.kdeplot(df['age'], label="Age", color="blue", ax=ax)
    sns.kdeplot(df['cholesterol'], label="Cholesterol", color="red", ax=ax)
    plt.legend()
    st.pyplot(fig)

# Sidebar information section
st.sidebar.header("About")
st.sidebar.info("This dashboard is designed to analyze heart disease data for educational purposes.")

pip install streamlit

!pip install -q streamlit
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set up page title and description
st.title("Heart Disease Analysis Dashboard")
st.write("""
Welcome to the Heart Disease Analysis App! Here, you can explore and visualize heart disease data to understand key trends and patterns.
""")

# Load the heart disease dataset
file_path = "/heart.csv"
try:
    df = pd.read_csv(file_path)
except FileNotFoundError:
    st.error("Heart disease dataset not found. Please upload the correct file.")
else:
    st.subheader("Dataset Overview")
    st.write("Here’s a preview of the data:")
    st.write(df.head())

    # Show basic statistics of the dataset
    st.subheader("Basic Statistics")
    st.write(df.describe())

    # Display a correlation heatmap
    st.subheader("Correlation Matrix")
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(df.corr(), annot=True, cmap="coolwarm", ax=ax)
    st.pyplot(fig)

    # Display the distribution of ages in the dataset
    st.subheader("Age Distribution of Patients")
    fig, ax = plt.subplots()
    sns.histplot(df['age'], bins=20, kde=True, color="skyblue", ax=ax)
    plt.xlabel("Age")
    plt.ylabel("Frequency")
    st.pyplot(fig)

    # Check for columns like 'cholesterol' and 'target' for more visualizations
    if 'cholesterol' in df.columns and 'age' in df.columns:
        st.subheader("Cholesterol Levels by Age Group")
        fig, ax = plt.subplots()
        sns.scatterplot(data=df, x="age", y="cholesterol", hue="target", palette="cool", ax=ax)
        plt.xlabel("Age")
        plt.ylabel("Cholesterol Level")
        st.pyplot(fig)

# Sidebar options for more interactivity
st.sidebar.header("Analysis Options")
if st.sidebar.checkbox("Show Age and Cholesterol Distribution"):
    st.subheader("Age and Cholesterol Distribution")
    fig, ax = plt.subplots()
    sns.kdeplot(df['age'], label="Age", color="blue", ax=ax)
    sns.kdeplot(df['cholesterol'], label="Cholesterol", color="red", ax=ax)
    plt.legend()
    st.pyplot(fig)

# Sidebar information section
st.sidebar.header("About")
st.sidebar.info("This dashboard is designed to analyze heart disease data for educational purposes.")



